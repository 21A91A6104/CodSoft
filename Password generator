import random
import string
import tkinter as tk
from tkinter import messagebox

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")

        self.title_label = tk.Label(root, text="Password Generator", font=("Helvetica", 16, "bold"))
        self.title_label.pack(pady=10)

        self.username_label = tk.Label(root, text="Enter username:")
        self.username_label.pack()

        self.username_entry = tk.Entry(root)
        self.username_entry.pack()

        self.length_label = tk.Label(root, text="Enter password length:")
        self.length_label.pack()

        self.length_entry = tk.Entry(root)
        self.length_entry.pack()

        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.pack()

        self.generated_password_label = tk.Label(root, text="")
        self.generated_password_label.pack()

        self.button_frame = tk.Frame(root)
        self.button_frame.pack(pady=10)

        self.accept_button = tk.Button(self.button_frame, text="Accept", state=tk.DISABLED, command=self.accept_password)
        self.accept_button.pack(side=tk.LEFT, padx=10)

        self.reject_button = tk.Button(self.button_frame, text="Reject", state=tk.DISABLED, command=self.reject_password)
        self.reject_button.pack(side=tk.LEFT)

        self.generated_password = ""

    def generate_password(self):
        try:
            password_length = int(self.length_entry.get())
            if password_length <= 0:
                messagebox.showerror("Invalid Input", "Password length should be greater than 0.")
                return

            characters = string.ascii_letters + string.digits + string.punctuation
            password = ''.join(random.choice(characters) for _ in range(password_length))

            self.generated_password = password
            self.generated_password_label.config(text="Generated Password: " + password)
            self.accept_button.config(state=tk.NORMAL)
            self.reject_button.config(state=tk.NORMAL)

        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid integer.")

    def accept_password(self):
        username = self.username_entry.get()
        messagebox.showinfo("Password Accepted", f"Password for '{username}': {self.generated_password}")
        self.reset_state()

    def reject_password(self):
        self.reset_state()

    def reset_state(self):
        self.username_entry.delete(0, tk.END)
        self.length_entry.delete(0, tk.END)
        self.generated_password = ""
        self.generated_password_label.config(text="")
        self.accept_button.config(state=tk.DISABLED)
        self.reject_button.config(state=tk.DISABLED)

def main():
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
